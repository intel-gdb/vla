# Copyright 2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

standard_testfile ".f90"

if { [prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} \
    {debug f90 quiet}] } {
    return -1
}

# check that all fortran standard datatypes will be
# handled correctly when using as VLA's

if ![runto MAIN__] then {
    perror "couldn't run to breakpoint MAIN__"
    continue
}

gdb_breakpoint [gdb_get_line_number "vlas-allocated"]
gdb_continue_to_breakpoint "vlas-allocated"
gdb_test "next" "\\d+(\\s|\\t)+l = allocated\\\(realvla\\\)" \
  "next to allocation status of intvla"
gdb_test "print l" "\\\$\\d+ = \\.TRUE\\." "intvla allocated"
gdb_test "next" "\\d+(\\s|\\t)+l = allocated\\\(complexvla\\\)" \
  "next to allocation status of realvla"
gdb_test "print l" "\\\$\\d+ = \\.TRUE\\." "realvla allocated"
gdb_test "next" "\\d+(\\s|\\t)+l = allocated\\\(logicalvla\\\)" \
  "next to allocation status of complexvla"
gdb_test "print l" "\\\$\\d+ = \\.TRUE\\." "complexvla allocated"
gdb_test "next" "\\d+(\\s|\\t)+l = allocated\\\(charactervla\\\)" \
  "next to allocation status of logicalvla"
gdb_test "print l" "\\\$\\d+ = \\.TRUE\\." "logicalvla allocated"
gdb_test "next" "\\d+(\\s|\\t)+intvla\\\(:,:,:\\\) = 1" \
  "next to allocation status of charactervla"
gdb_test "print l" "\\\$\\d+ = \\.TRUE\\." "charactervla allocated"

gdb_breakpoint [gdb_get_line_number "vlas-initialized"]
gdb_continue_to_breakpoint "vlas-initialized"
gdb_test "ptype intvla" "type = integer\\\(kind=4\\\) \\\(11,22,33\\\)" \
  "ptype intvla"
gdb_test "ptype realvla" "type = real\\\(kind=4\\\) \\\(11,22,33\\\)" \
  "ptype realvla"
gdb_test "ptype complexvla" "type = complex\\\(kind=4\\\) \\\(11,22,33\\\)" \
  "ptype complexvla"
gdb_test "ptype logicalvla" "type = logical\\\(kind=4\\\) \\\(11,22,33\\\)" \
  "ptype logicalvla"
gdb_test "ptype charactervla" "type = character\\\*1 \\\(11,22,33\\\)" \
  "ptype charactervla"

gdb_test "print intvla(5,5,5)" "\\$\\d+ = 1" "print intvla(5,5,5) (1st)"
gdb_test "print realvla(5,5,5)" "\\$\\d+ = 3.14\\d+" \
  "print realvla(5,5,5) (1st)"
gdb_test "print complexvla(5,5,5)" "\\$\\d+ = \\\(2,-3\\\)" \
  "print complexvla(5,5,5) (1st)"
gdb_test "print logicalvla(5,5,5)" "\\$\\d+ = \\.TRUE\\." \
  "print logicalvla(5,5,5) (1st)"
gdb_test "print charactervla(5,5,5)" "\\$\\d+ = 'K'" \
  "print charactervla(5,5,5) (1st)"

gdb_breakpoint [gdb_get_line_number "vlas-modified"]
gdb_continue_to_breakpoint "vlas-modified"
gdb_test "print intvla(5,5,5)" "\\$\\d+ = 42" "print intvla(5,5,5) (2nd)"
gdb_test "print realvla(5,5,5)" "\\$\\d+ = 4.13\\d+" \
  "print realvla(5,5,5) (2nd)"
gdb_test "print complexvla(5,5,5)" "\\$\\d+ = \\\(-3,2\\\)" \
  "print complexvla(5,5,5) (2nd)"
gdb_test "print logicalvla(5,5,5)" "\\$\\d+ = \\.FALSE\\." \
  "print logicalvla(5,5,5) (2nd)"
gdb_test "print charactervla(5,5,5)" "\\$\\d+ = 'X'" \
  "print charactervla(5,5,5) (2nd)"
